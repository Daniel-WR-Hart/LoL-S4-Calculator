package com.leagueoflegendscalculator.myclasses;

import com.google.gson.Gson;


public class ConvertSavedElementsBuildsToClassStatCalculations {
	public ClassStatCalculations statFinal;
	
	public ConvertSavedElementsBuildsToClassStatCalculations(SavedElementsBuilds buildInput){

    	Gson gson = new Gson();
		//retrieve the serialized strings of the four inputs contained in the SavedElementsBuilds Object and turn them into objects containing the inputs specific to each build component
    	SavedElementsChampions championInput = gson.fromJson(buildInput.getChampionInputString(), SavedElementsChampions.class);
		SavedElementsItems itemInput = gson.fromJson(buildInput.getItemInputString(), SavedElementsItems.class);
		SavedElementsMastery masteryInput = gson.fromJson(buildInput.getMasteryInputString(), SavedElementsMastery.class);
		SavedElementsRunes runeInput = gson.fromJson(buildInput.getRuneInputString(), SavedElementsRunes.class);

		//turn the input objects into objects that transform the saved user input into variables containing the actual in-game information 
		ClassChampion championStats = new ClassChampion(championInput.getName(), Integer.parseInt(championInput.getLevel()), Integer.parseInt(championInput.getQSkill()), Integer.parseInt(championInput.getWSkill()), Integer.parseInt(championInput.getESkill()), Integer.parseInt(championInput.getRSkill()));
		ClassItems itemStats = new ClassItems(itemInput.getItem1(), itemInput.getItem2(), itemInput.getItem3(), itemInput.getItem4(), itemInput.getItem5(), itemInput.getItem6());
		ClassMastery masteryStats = new ClassMastery(Boolean.parseBoolean(masteryInput.getDoubleEdgedSwordCount())
				, Byte.parseByte(masteryInput.getFuryCount())
				, Byte.parseByte(masteryInput.getSorceryCount())
				, Boolean.parseBoolean(masteryInput.getExposeWeaknessCount())
				, Boolean.parseBoolean(masteryInput.getMartialMasteryCount())
				, Boolean.parseBoolean(masteryInput.getArcaneMasteryCount())
				, Boolean.parseBoolean(masteryInput.getBladeWeavingCount())
				, Byte.parseByte(masteryInput.getWarlordCount())
				, Byte.parseByte(masteryInput.getArchmageCount())
				, Boolean.parseBoolean(masteryInput.getFrenzyCount())
				, Byte.parseByte(masteryInput.getDevastatingStrikeCount())
				, Boolean.parseBoolean(masteryInput.getArcaneBladeCount())
				, Boolean.parseBoolean(masteryInput.getHavocCount())
				, Byte.parseByte(masteryInput.getRecoveryCount())
				, Byte.parseByte(masteryInput.getEnchantedArmorCount())
				, Boolean.parseBoolean(masteryInput.getUnyieldingCount())
				, Boolean.parseBoolean(masteryInput.getOppressionCount())
				, Boolean.parseBoolean(masteryInput.getJuggernautCount())
				, Boolean.parseBoolean(masteryInput.getReinforcedArmorCount())
				, Boolean.parseBoolean(masteryInput.getEvasiveCount())
				, Boolean.parseBoolean(masteryInput.getSecondWindCount())
				, Boolean.parseBoolean(masteryInput.getRunicBlessingCount())
				, Byte.parseByte(masteryInput.getFleetOfFootCount())
				, Boolean.parseBoolean(masteryInput.getStrengthOfSpiritCount())
				, Byte.parseByte(masteryInput.getVampirismCount())
				, Byte.parseByte(masteryInput.getExpandedMindCount())
				, Byte.parseByte(masteryInput.getIntelligenceCount())
				, Byte.parseByte(masteryInput.getBruteForceCount())
				, Byte.parseByte(masteryInput.getMentalForceCount())
				, Boolean.parseBoolean(masteryInput.getSpellWeavingCount())
				, Byte.parseByte(masteryInput.getExecutionerCount())
				, Byte.parseByte(masteryInput.getBlockCount())
				, Byte.parseByte(masteryInput.getVeteransScarsCount())
				, Byte.parseByte(masteryInput.getHardinessCount())
				, Byte.parseByte(masteryInput.getResistanceCount())
				, Byte.parseByte(masteryInput.getPerseveranceCount())
				, Byte.parseByte(masteryInput.getMeditationCount()));
		
	ClassRunes runeStats = new ClassRunes(Byte.parseByte(runeInput.getAbilityPowerRuneMCount())
			, Byte.parseByte(runeInput.getAbilityPowerRuneSCount())
			, Byte.parseByte(runeInput.getAbilityPowerRuneGCount())
			, Byte.parseByte(runeInput.getAbilityPowerRuneQCount())
			, Byte.parseByte(runeInput.getAbilityPowerScalingRuneMCount())
			, Byte.parseByte(runeInput.getAbilityPowerScalingRuneSCount())
			, Byte.parseByte(runeInput.getAbilityPowerScalingRuneGCount())
			, Byte.parseByte(runeInput.getAbilityPowerScalingRuneQCount())
			, Byte.parseByte(runeInput.getArmorRuneMCount())
			, Byte.parseByte(runeInput.getArmorRuneSCount())
			, Byte.parseByte(runeInput.getArmorRuneGCount())
			, Byte.parseByte(runeInput.getArmorRuneQCount())
			, Byte.parseByte(runeInput.getArmorScalingRuneSCount())
			, Byte.parseByte(runeInput.getArmorScalingRuneQCount())
			, Byte.parseByte(runeInput.getArmorPenetrationRuneMCount())
			, Byte.parseByte(runeInput.getArmorPenetrationRuneQCount())
			, Byte.parseByte(runeInput.getAttackDamageRuneMCount())
			, Byte.parseByte(runeInput.getAttackDamageRuneSCount())
			, Byte.parseByte(runeInput.getAttackDamageRuneGCount())
			, Byte.parseByte(runeInput.getAttackDamageRuneQCount())
			, Byte.parseByte(runeInput.getAttackDamageScalingRuneMCount())
			, Byte.parseByte(runeInput.getAttackDamageScalingRuneSCount())
			, Byte.parseByte(runeInput.getAttackDamageScalingRuneGCount())
			, Byte.parseByte(runeInput.getAttackDamageScalingRuneQCount())
			, Byte.parseByte(runeInput.getAttackSpeedRuneMCount())
			, Byte.parseByte(runeInput.getAttackSpeedRuneSCount())
			, Byte.parseByte(runeInput.getAttackSpeedRuneGCount())
			, Byte.parseByte(runeInput.getAttackSpeedRuneQCount())
			, Byte.parseByte(runeInput.getCooldownReductionRuneMCount())
			, Byte.parseByte(runeInput.getCooldownReductionRuneSCount())
			, Byte.parseByte(runeInput.getCooldownReductionRuneGCount())
			, Byte.parseByte(runeInput.getCooldownReductionRuneQCount())
			, Byte.parseByte(runeInput.getCooldownReductionScalingRuneGCount())
			, Byte.parseByte(runeInput.getCooldownReductionScalingRuneQCount())
			, Byte.parseByte(runeInput.getCriticalChanceRuneMCount())
			, Byte.parseByte(runeInput.getCriticalChanceRuneSCount())
			, Byte.parseByte(runeInput.getCriticalChanceRuneGCount())
			, Byte.parseByte(runeInput.getCriticalChanceRuneQCount())
			, Byte.parseByte(runeInput.getCriticalDamageRuneMCount())
			, Byte.parseByte(runeInput.getCriticalDamageRuneSCount())
			, Byte.parseByte(runeInput.getCriticalDamageRuneGCount())
			, Byte.parseByte(runeInput.getCriticalDamageRuneQCount())
			, Byte.parseByte(runeInput.getEnergyRuneGCount())
			, Byte.parseByte(runeInput.getEnergyRuneQCount())
			, Byte.parseByte(runeInput.getEnergyScalingRuneGCount())
			, Byte.parseByte(runeInput.getEnergyRegenRuneSCount())
			, Byte.parseByte(runeInput.getEnergyRegenRuneQCount())
			, Byte.parseByte(runeInput.getEnergyRegenScalingRuneSCount())
			, Byte.parseByte(runeInput.getHealthRuneMCount())
			, Byte.parseByte(runeInput.getHealthRuneSCount())
			, Byte.parseByte(runeInput.getHealthRuneGCount())
			, Byte.parseByte(runeInput.getHealthRuneQCount())
			, Byte.parseByte(runeInput.getHealthScalingRuneMCount())
			, Byte.parseByte(runeInput.getHealthScalingRuneSCount())
			, Byte.parseByte(runeInput.getHealthScalingRuneGCount())
			, Byte.parseByte(runeInput.getHealthScalingRuneQCount())
			, Byte.parseByte(runeInput.getHealthPercentRuneSCount())
			, Byte.parseByte(runeInput.getHealthPercentRuneQCount())
			, Byte.parseByte(runeInput.getHealthRegenRuneSCount())
			, Byte.parseByte(runeInput.getHealthRegenRuneGCount())
			, Byte.parseByte(runeInput.getHealthRegenRuneQCount())
			, Byte.parseByte(runeInput.getHealthRegenScalingRuneSCount())
			, Byte.parseByte(runeInput.getHealthRegenScalingRuneQCount())
			, Byte.parseByte(runeInput.getHybridPenetrationRuneMCount())
			, Byte.parseByte(runeInput.getHybridPenetrationRuneQCount())
			, Byte.parseByte(runeInput.getLifeStealRuneQCount())
			, Byte.parseByte(runeInput.getMagicPenetrationRuneMCount())
			, Byte.parseByte(runeInput.getMagicPenetrationRuneGCount())
			, Byte.parseByte(runeInput.getMagicPenetrationRuneQCount())
			, Byte.parseByte(runeInput.getMagicResistRuneMCount())
			, Byte.parseByte(runeInput.getMagicResistRuneSCount())
			, Byte.parseByte(runeInput.getMagicResistRuneGCount())
			, Byte.parseByte(runeInput.getMagicResistRuneQCount())
			, Byte.parseByte(runeInput.getMagicResistScalingRuneMCount())
			, Byte.parseByte(runeInput.getMagicResistScalingRuneSCount())
			, Byte.parseByte(runeInput.getMagicResistScalingRuneGCount())
			, Byte.parseByte(runeInput.getMagicResistScalingRuneQCount())
			, Byte.parseByte(runeInput.getManaRuneMCount())
			, Byte.parseByte(runeInput.getManaRuneSCount())
			, Byte.parseByte(runeInput.getManaRuneGCount())
			, Byte.parseByte(runeInput.getManaRuneQCount())
			, Byte.parseByte(runeInput.getManaScalingRuneMCount())
			, Byte.parseByte(runeInput.getManaScalingRuneSCount())
			, Byte.parseByte(runeInput.getManaScalingRuneGCount())
			, Byte.parseByte(runeInput.getManaScalingRuneQCount())
			, Byte.parseByte(runeInput.getManaRegenRuneMCount())
			, Byte.parseByte(runeInput.getManaRegenRuneSCount())
			, Byte.parseByte(runeInput.getManaRegenRuneGCount())
			, Byte.parseByte(runeInput.getManaRegenRuneQCount())
			, Byte.parseByte(runeInput.getManaRegenScalingRuneSCount())
			, Byte.parseByte(runeInput.getManaRegenScalingRuneGCount())
			, Byte.parseByte(runeInput.getManaRegenScalingRuneQCount())
			, Byte.parseByte(runeInput.getMovementSpeedRuneQCount())
			, Byte.parseByte(runeInput.getSpellVampRuneQCount()));
		
	//take all four of these objects and integrate them into the final object, the object containing ALL the required data for the build
	statFinal = new ClassStatCalculations(championStats, itemStats, masteryStats, runeStats);
		
	}	
}
